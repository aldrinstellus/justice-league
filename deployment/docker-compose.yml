version: '3.8'

################################################################################
# Oracle Production Docker Compose Configuration
# Week 11-12: Production Deployment Infrastructure
#
# This configuration supports blue-green deployment with:
# - Two Oracle instances (blue and green)
# - Nginx load balancer for traffic routing
# - Prometheus for monitoring
# - Shared volumes for data persistence
################################################################################

services:
  ############################################################################
  # Oracle Blue Environment
  ############################################################################
  oracle-blue:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        BUILD_TIME: ${BUILD_TIME:-}
        GIT_COMMIT: ${GIT_COMMIT:-}
        ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: oracle-blue
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - INSTANCE_NAME=blue
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_PATH=/app/data/oracle.db
    volumes:
      - oracle-data-blue:/app/data
      - oracle-logs-blue:/app/logs
      - oracle-backups:/app/backups:ro  # Read-only access to backups
    networks:
      - oracle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "/app/deployment/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ############################################################################
  # Oracle Green Environment
  ############################################################################
  oracle-green:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        BUILD_TIME: ${BUILD_TIME:-}
        GIT_COMMIT: ${GIT_COMMIT:-}
        ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: oracle-green
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - INSTANCE_NAME=green
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_PATH=/app/data/oracle.db
    volumes:
      - oracle-data-green:/app/data
      - oracle-logs-green:/app/logs
      - oracle-backups:/app/backups:ro
    networks:
      - oracle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "/app/deployment/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ############################################################################
  # Nginx Load Balancer
  ############################################################################
  nginx:
    image: nginx:alpine
    container_name: oracle-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - oracle-network
    depends_on:
      - oracle-blue
      - oracle-green
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  ############################################################################
  # Prometheus Monitoring
  ############################################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: oracle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - oracle-network
    restart: unless-stopped

  ############################################################################
  # Grafana Dashboard
  ############################################################################
  grafana:
    image: grafana/grafana:latest
    container_name: oracle-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    networks:
      - oracle-network
    depends_on:
      - prometheus
    restart: unless-stopped

  ############################################################################
  # Node Exporter (System Metrics)
  ############################################################################
  node-exporter:
    image: prom/node-exporter:latest
    container_name: oracle-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - oracle-network
    restart: unless-stopped

################################################################################
# Networks
################################################################################
networks:
  oracle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

################################################################################
# Volumes
################################################################################
volumes:
  # Blue environment volumes
  oracle-data-blue:
    driver: local
  oracle-logs-blue:
    driver: local

  # Green environment volumes
  oracle-data-green:
    driver: local
  oracle-logs-green:
    driver: local

  # Shared volumes
  oracle-backups:
    driver: local

  # Nginx volumes
  nginx-logs:
    driver: local

  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
