'use client'

/**
 * Dashboard 10 - Educational LMS Dashboard
 *
 * Generated by Hawkman Equipped v2.0
 * Source: Figma UI Master (node 3215:58693)
 * Format: React + shadcn/ui
 * Complexity: 674 layers, 12 levels deep
 *
 * Features:
 * - Responsive navigation with search
 * - Course grid with filtering tabs
 * - Announcements sidebar
 * - Upcoming tests list
 * - To-do list with checkboxes
 * - Chat widget
 * - Badge collection
 */

import React, { useState } from 'react'
import {
  Search,
  ShoppingCart,
  Zap,
  Bell,
  ChevronDown,
  Menu,
  Star,
  Clock,
  MoreVertical,
  Heart,
  Share2,
  Calendar,
  Users,
  CheckCircle2,
  MessageCircle,
  Send,
  Paperclip,
  Image as ImageIcon
} from 'lucide-react'

// shadcn/ui components (would be imported from @/components/ui in production)
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Checkbox } from '@/components/ui/checkbox'

interface CourseCardProps {
  title: string
  instructor: string
  season: string
  year: number
  category: string
  categoryColor: string
  image: string
  stats?: {
    stars?: number
    lessons?: number
    duration?: string
  }
}

interface AnnouncementProps {
  title: string
  time: string
  avatar: string
}

interface TestProps {
  subject: string
  testName: string
  date: string
  image: string
}

interface TodoItemProps {
  task: string
  dueDate: string
  completed: boolean
  urgent?: boolean
}

export default function Dashboard10() {
  const [activeTab, setActiveTab] = useState('all')
  const [chatOpen, setChatOpen] = useState(false)
  const [todos, setTodos] = useState([
    { task: 'Meet your teachers', dueDate: 'May 1', completed: false },
    { task: 'Introduction to classmates', dueDate: '', completed: false },
    { task: 'First Assignment', dueDate: 'May 1', completed: false, urgent: true },
    { task: 'Second Assignment', dueDate: 'May 2', completed: false }
  ])

  const courses = [
    {
      title: 'States and Capitals',
      instructor: 'John Sturgio',
      season: 'Summer',
      year: 2023,
      category: 'History & Geography',
      categoryColor: 'bg-teal-500',
      image: '/api/placeholder/400/240',
      stats: { stars: 4, lessons: 12, duration: '8 hrs' }
    },
    {
      title: 'Number System',
      instructor: 'Jane Austin',
      season: 'Summer',
      year: 2023,
      category: 'Math',
      categoryColor: 'bg-orange-500',
      image: '/api/placeholder/400/240',
      stats: { stars: 5, lessons: 15, duration: '10 hrs' }
    },
    {
      title: 'Earth and Space',
      instructor: 'Jane Austin',
      season: 'Summer',
      year: 2023,
      category: 'Science',
      categoryColor: 'bg-purple-500',
      image: '/api/placeholder/400/240',
      stats: { stars: 5, lessons: 20, duration: '12 hrs' }
    },
    {
      title: 'Reading and Writing Stories',
      instructor: 'John Sturgio',
      season: 'Summer',
      year: 2023,
      category: 'Language Arts',
      categoryColor: 'bg-green-500',
      image: '/api/placeholder/400/240',
      stats: { stars: 4, lessons: 18, duration: '9 hrs' }
    },
    {
      title: 'Heredity and evolution',
      instructor: 'Jane Austin',
      season: 'Summer',
      year: 2023,
      category: 'Science',
      categoryColor: 'bg-purple-500',
      image: '/api/placeholder/400/240',
      stats: { stars: 5, lessons: 14, duration: '11 hrs' }
    }
  ]

  const announcements = [
    { title: 'Heredity and evolution (Class has been added)', time: '2mins ago', avatar: 'üë•' },
    { title: 'Assignment 2 has been added', time: '10mins ago', avatar: 'üìù' }
  ]

  const upcomingTests = [
    { subject: 'English', testName: 'Basic English', date: 'May 15', image: '/api/placeholder/60/60' },
    { subject: 'Science', testName: 'Atomic Reactions', date: 'May 12', image: '/api/placeholder/60/60' },
    { subject: 'History', testName: 'World War II', date: 'May 16', image: '/api/placeholder/60/60' }
  ]

  const badges = [
    { icon: 'üèÖ', name: 'Achievement 1' },
    { icon: 'üéñÔ∏è', name: 'Achievement 2' },
    { icon: 'üèÜ', name: 'Achievement 3' }
  ]

  const CourseCard: React.FC<CourseCardProps> = ({
    title,
    instructor,
    season,
    year,
    category,
    categoryColor,
    image,
    stats
  }) => (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow">
      <div className="relative h-40 bg-gray-100">
        <div className={`absolute top-3 left-3 px-3 py-1 rounded-full text-white text-xs font-medium ${categoryColor}`}>
          {category}
        </div>
        <img src={image} alt={title} className="w-full h-full object-cover" />
      </div>
      <CardContent className="p-4">
        <h3 className="font-semibold text-lg mb-2">{title}</h3>
        <div className="flex items-center gap-2 text-sm text-gray-600 mb-3">
          <Avatar className="h-6 w-6">
            <AvatarFallback>{instructor.split(' ').map(n => n[0]).join('')}</AvatarFallback>
          </Avatar>
          <span>{instructor}</span>
          <span>‚Ä¢</span>
          <span className="flex items-center gap-1">
            <Clock className="h-3 w-3" />
            {season} {year}
          </span>
        </div>
        <div className="flex items-center justify-between pt-3 border-t">
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Star className="h-5 w-5 text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Clock className="h-5 w-5 text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Share2 className="h-5 w-5 text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <MoreVertical className="h-5 w-5 text-gray-600" />
          </button>
        </div>
      </CardContent>
    </Card>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top Navigation */}
      <nav className="bg-white border-b sticky top-0 z-50">
        <div className="max-w-[1440px] mx-auto px-6 h-16 flex items-center justify-between">
          {/* Left: Logo & Menu */}
          <div className="flex items-center gap-6">
            <button className="lg:hidden p-2">
              <Menu className="h-6 w-6" />
            </button>
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-pink-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold">
                Q
              </div>
              <span className="text-xl font-bold">quzmor</span>
            </div>
          </div>

          {/* Center: Search */}
          <div className="hidden md:flex items-center flex-1 max-w-md mx-8">
            <div className="relative w-full">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search..."
                className="pl-10 bg-gray-50 border-gray-200"
              />
            </div>
          </div>

          {/* Right: Actions */}
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="icon" className="relative">
              <ShoppingCart className="h-5 w-5" />
              <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 rounded-full text-[10px] text-white flex items-center justify-center">
                3
              </span>
            </Button>
            <Button variant="ghost" size="icon">
              <Zap className="h-5 w-5" />
            </Button>
            <Button variant="ghost" size="icon" className="relative">
              <Bell className="h-5 w-5" />
              <span className="absolute top-1 right-1 h-2 w-2 bg-red-500 rounded-full"></span>
            </Button>
            <div className="flex items-center gap-2 pl-3 border-l">
              <Avatar>
                <AvatarImage src="/api/placeholder/40/40" />
                <AvatarFallback>GW</AvatarFallback>
              </Avatar>
              <div className="hidden lg:block">
                <div className="text-sm font-medium">Georgia Watson</div>
              </div>
              <ChevronDown className="h-4 w-4 text-gray-600" />
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-[1440px] mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-8">
          {/* Main Content */}
          <div className="space-y-8">
            {/* Welcome Section */}
            <div>
              <h1 className="text-3xl font-bold mb-2 flex items-center gap-2">
                Good Morning, Georgia üëã
              </h1>
              <p className="text-gray-600">
                Nice to have you back! Get ready and continue your lesson today
              </p>
            </div>

            {/* My Badges */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-3">
                <CardTitle className="text-lg">My Badges</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4">
                  {badges.map((badge, i) => (
                    <div key={i} className="flex flex-col items-center gap-2">
                      <div className="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center text-3xl shadow-lg">
                        {badge.icon}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Today's Classes */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-bold">Today&apos;s Classes</h2>
                <Button variant="link" className="text-pink-500">View all</Button>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {courses.slice(0, 3).map((course, i) => (
                  <CourseCard key={i} {...course} />
                ))}
              </div>
            </div>

            {/* Your Courses */}
            <div>
              <h2 className="text-2xl font-bold mb-4">Your Courses</h2>
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="mb-6">
                  <TabsTrigger value="all">All</TabsTrigger>
                  <TabsTrigger value="language">Language Arts</TabsTrigger>
                  <TabsTrigger value="math">Math</TabsTrigger>
                  <TabsTrigger value="science">Science</TabsTrigger>
                  <TabsTrigger value="history">History & Geography</TabsTrigger>
                  <TabsTrigger value="spelling">Spelling</TabsTrigger>
                </TabsList>
                <TabsContent value={activeTab} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {courses.map((course, i) => (
                      <CourseCard key={i} {...course} />
                    ))}
                  </div>
                </TabsContent>
              </Tabs>
            </div>
          </div>

          {/* Right Sidebar */}
          <div className="space-y-6">
            {/* Announcements */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-3">
                <CardTitle className="text-lg">Announcement</CardTitle>
                <Button variant="link" size="sm" className="text-pink-500 text-sm">View all</Button>
              </CardHeader>
              <CardContent className="space-y-3">
                {announcements.map((announcement, i) => (
                  <div key={i} className="flex gap-3 p-3 bg-pink-50 rounded-lg">
                    <div className="text-2xl">{announcement.avatar}</div>
                    <div className="flex-1">
                      <p className="text-sm font-medium mb-1">{announcement.title}</p>
                      <p className="text-xs text-gray-500">{announcement.time}</p>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Upcoming Tests */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-3">
                <CardTitle className="text-lg">Upcoming Tests</CardTitle>
                <Button variant="link" size="sm" className="text-pink-500 text-sm">View all</Button>
              </CardHeader>
              <CardContent className="space-y-3">
                {upcomingTests.map((test, i) => (
                  <div key={i} className="flex items-center gap-3 pb-3 border-b last:border-0 last:pb-0">
                    <div className="w-12 h-12 bg-gray-100 rounded-lg overflow-hidden">
                      <img src={test.image} alt={test.testName} className="w-full h-full object-cover" />
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-semibold">{test.testName}</p>
                      <p className="text-xs text-gray-500">{test.subject} test 2</p>
                    </div>
                    <div className="text-right">
                      <p className="text-xs text-gray-500">{test.date}</p>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* To-Do List */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between pb-3">
                <CardTitle className="text-lg">To-Do List</CardTitle>
                <Button variant="link" size="sm" className="text-pink-500 text-sm">View all</Button>
              </CardHeader>
              <CardContent className="space-y-3">
                {todos.map((todo, i) => (
                  <div key={i} className="flex items-center gap-3">
                    <Checkbox
                      checked={todo.completed}
                      onCheckedChange={(checked) => {
                        const newTodos = [...todos]
                        newTodos[i].completed = checked as boolean
                        setTodos(newTodos)
                      }}
                    />
                    <div className="flex-1">
                      <p className={`text-sm ${todo.completed ? 'line-through text-gray-400' : ''}`}>
                        {todo.task}
                      </p>
                      {todo.dueDate && (
                        <p className="text-xs text-gray-500 flex items-center gap-1 mt-1">
                          <Calendar className="h-3 w-3" />
                          {todo.dueDate}
                          {todo.urgent && <Badge variant="destructive" className="text-xs ml-2">Due tomorrow</Badge>}
                        </p>
                      )}
                    </div>
                  </div>
                ))}
                <Button className="w-full mt-3 bg-green-500 hover:bg-green-600">
                  <CheckCircle2 className="h-4 w-4 mr-2" />
                  2/4 Complete
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Floating Chat Widget */}
      {chatOpen && (
        <Card className="fixed bottom-20 right-6 w-80 shadow-2xl z-50">
          <CardHeader className="pb-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <MessageCircle className="h-5 w-5" />
                <CardTitle className="text-white">Chat</CardTitle>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="text-white hover:bg-white/20"
                onClick={() => setChatOpen(false)}
              >
                ‚úï
              </Button>
            </div>
          </CardHeader>
          <CardContent className="p-4 h-64 overflow-y-auto bg-gray-50">
            <div className="text-center text-gray-500 text-sm py-8">
              No messages yet. Start a conversation!
            </div>
          </CardContent>
          <CardFooter className="flex gap-2 p-3 border-t">
            <Button variant="ghost" size="icon">
              <Paperclip className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon">
              <ImageIcon className="h-4 w-4" />
            </Button>
            <Input placeholder="Type a message..." className="flex-1" />
            <Button size="icon" className="bg-purple-500 hover:bg-purple-600">
              <Send className="h-4 w-4" />
            </Button>
          </CardFooter>
        </Card>
      )}

      {/* Chat Toggle Button */}
      <Button
        className="fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
        onClick={() => setChatOpen(!chatOpen)}
      >
        <MessageCircle className="h-6 w-6" />
      </Button>
    </div>
  )
}
